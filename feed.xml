<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://cryptolabinc.github.io/ckksorg1659181/feed.xml" rel="self" type="application/atom+xml"/><link href="https://cryptolabinc.github.io/ckksorg1659181/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-09T15:29:48+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/feed.xml</id><title type="html">CKKS.org</title><subtitle></subtitle><entry><title type="html">Grafting: Improving Performance and Usability of Homomorphic Encryption</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/Johannes/" rel="alternate" type="text/html" title="Grafting: Improving Performance and Usability of Homomorphic Encryption"/><published>2025-05-08T15:12:00+00:00</published><updated>2025-05-08T15:12:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2025/Johannes</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/Johannes/"><![CDATA[<ul> <li>Written by <a href="https://www.asdf.one/">Johannes Mono</a> (Ruhr University Bochum &amp; CryptoLab)</li> <li>Based on <a href="https://ia.cr/2024/1014">https://ia.cr/2024/1014</a></li> </ul> <p><em>TL;DR: Grafting is a new approach for managing a CKKS ciphertext modulus. With so-called sprouts, we dedicate a few machine words to scaling and use word-sized primes for the remaining ciphertext modulus improving performance. With universal sprouts, we can represent any bit size up to the word size using powers-of-two and introduce arbitrary scaling for RNS-CKKS improving usability for parameter and circuit design.</em></p> <hr/> <p>Homomorphic encryption is one of the most exciting technologies for modern society. If you’ve never heard of it, congratulations, you’re one of <a href="https://xkcd.com/1053">today’s lucky 10,000</a>! Here’s our FAQ to get you started:</p> <ul> <li>What is homomorphic encryption?</li> <li>What is CKKS?</li> </ul> <p>In recent years, research has continuously improved two significant challenges: performance and usability. <em>Grafting</em> is a new technique improving performance and usability for the homomorphic encryption scheme CKKS. Let’s try to understand the problems Grafting solves.</p> <h2 id="ckks-parameters">CKKS Parameters</h2> <p>Encryption schemes base their security on mathematically hard problems. The CKKS scheme bases it on the Learning with Errors over Rings (RLWE) problem. Sounds complicated? It is. Fortunately, we do not need to understand it, we only need to meet one important RLWE parameter: the number $q$, also called <em>ciphertext modulus</em>. CKKS needs a huge ciphertext modulus, it sometimes uses over 3000 bits! For comparison, we can store the number of atoms in the universe in only 266 bits. And a single CKKS encryption needs thousands of random numbers from 0 to $q$. That sounds like lots of bits (and it is), but modern technology actually handles them with ease; even your smartphone can store many CKKS encryptions. Obviously, there is a catch. We use CKKS not only to store, but to compute on encryptions. And computing on thousands of numbers from 0 to $q$ is not cheap, especially because we compute complex mathematical functions.</p> <p>Despite its costs, CKKS is <a href="https://www.youtube.com/watch?v=Zl1lVxQyj60">reasonably fast on modern machines</a>. Modern machines operate on 64 bits at once, a so-called machine word. We want to use as few words as possible for our random numbers: the less words we compute on, the faster we are. For performance, we split up $q$ into $\ell$ small numbers, each using 64 bits:</p> \[\textstyle q = q_1 \cdot q_2 \cdot q_3 \cdot \ldots \cdot q_\ell = \prod_{i = 1}^\ell q_i \text{.}\] <p>Each number from 0 to $q$ corresponds to exactly $\ell$ numbers from 0 to $q_i$, one for each $q_i$ (Figure 1).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/blog/250508_Johannes/1-480.webp 480w,/ckksorg1659181/assets/img/blog/250508_Johannes/1-800.webp 800w,/ckksorg1659181/assets/img/blog/250508_Johannes/1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/blog/250508_Johannes/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 1: A ciphertext modulus $q$ split up into $\ell = 10$ small numbers, each using 64 bits. </div> <p>This concept is also known as residue number system (RNS) and we can switch between one large number (0 to $q$) and $\ell$ small numbers (0 to $q_i$) anytime we want due to the <a href="https://en.m.wikipedia.org/wiki/Chinese_remainder_theorem">Chinese Remainder Theorem</a>. As with RLWE: We do not need to understand the math behind the RNS to understand Grafting, only what we use it for in CKKS. CKKS uses the RNS to improve performance, but it also uses it for the so-called scaling.</p> <h2 id="ckks-scaling">CKKS Scaling</h2> <p>CKKS encrypts approximate numbers which are, well, approximations of real numbers. An example you are probably familiar with is $\pi$: Teachers often approximate it as 3.14 for calculations even though it has infinitely many digits. In CKKS, we approximate numbers using integers and a scaling factor. For $3.14$, we need a scaling factor $\Delta = 100$ to store it in an integer:</p> \[3.14 \cdot s = 3.14 \cdot 100 = 314 \text{.}\] <p>For $3.14159265$, we need $\Delta = 100,000,000 = 10^8$:</p> \[3.14159265 \cdot \Delta = 3.14159265 \cdot 10^8 = 314159265 \text{.}\] <p>Alternatively, we round the scaled value and accept a worse approximation (for example with $s = 100$):</p> \[\lceil 3.14159265 \cdot \Delta\rfloor = \lceil 314.159265 \rfloor = 314 \text{.}\] <p>The larger the scaling factor, the better our approximation—but the larger our integers and the CKKS parameters we will need to encrypt them. We can add two scaled numbers $x$ and $y$ and get their scaled sum:</p> \[(\Delta \cdot x) + (\Delta \cdot y) = \Delta \cdot (x + y) \text{.}\] <p>We can also multiply two scaled numbers</p> \[(\Delta \cdot x) \cdot (\Delta \cdot y) = \Delta \cdot (\Delta \cdot x \cdot y) \text{;}\] <p>however, now we get an additional factor $\Delta$ which we have to remove again. For unencrypted numbers, we simply divide by $\Delta$ to get the correct result. For encrypted numbers, it is not that simple.</p> <p>Division in CKKS uses polynomial approximation, polynomial approximation needs multiplications, multiplications need divisions, divisions need polynomial approximations, polynomial approximations need … I think you understand the problem. Fortunately, we have a trick up our sleeves: Instead of dividing the encrypted numbers by $\Delta$, we remove one of the elements in $q = q_1 \cdot \ldots \cdot q_\ell$ with clever (and slightly complex) mathemathics. If $q_i \approx \Delta$, removing $q_i$ divides the encrypted numbers by $q_i \approx \Delta$ and we can remove the additional $\Delta$ from a multiplication! However, we cannot remove $q_i$ forever since $q$ only consists of $\ell$ small numbers. After $\ell - 1$ multiplications, we are left with only one small number: $q_1$. Then, we use a process called bootstrapping to go back to our big $q = q_1 \cdot \ldots \cdot q_\ell$.</p> <p>Scaling imposes another restriction on our $q_i$. Our accumulated requirements are now as follows:</p> <ul> <li>Each $q_i$ must be close to the scaling factor $s$ for multiplications to work correctly.</li> <li>Each $q_i$ needs to be a prime so we can use the RNS representation for performance.</li> <li>Each $q_i$ should use 64 bits (the machine word size) for best performance.</li> </ul> <p>But what if the scaling factor $s$ uses much less than 64 bits? Then, we waste computational resources: A modern machine always computes on 64 bits, even if we do not use all of them. And currently, CKKS scaling uses much less than 64 bits wasting precious resources. Grafting with universal sprouts solves this issue: We can scale by anything we want <em>and</em> choose large $q_i$ to use the full machine word.</p> <h2 id="grafting">Grafting</h2> <p>The idea behind Grafting is surprisingly simple. What if we could have one special 64 bit word where we can choose any bit size between 0 and 64? Then we could scale to any bit size we want. Example (Figure 2): We are at $330 = 10 + 5 \cdot 64$ bits and want to go to $300 = 44 + 4 * 64$ bits. We remove one large prime ($330 - 64 = 266$) and replace the special 30 bit word with a special 44 bit word ($266 - 10 + 44 = 300$).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/blog/250508_Johannes/2-480.webp 480w,/ckksorg1659181/assets/img/blog/250508_Johannes/2-800.webp 800w,/ckksorg1659181/assets/img/blog/250508_Johannes/2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/blog/250508_Johannes/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 2: Removing 30 bits from a ciphertext modulus without Grafting (top) and with Grafting (bottom). We need much less machine words for the same modulus size and still can easily scale by 30 bits. </div> <p>Along these lines, we can choose any bit size for $q$ using our special word. If we remove one bit from it, we scale the encrypted numbers by $s \approx 2$. Removing two bits from the special word scales the encrypted numbers by $s \approx 4$, removing three bits by $s \approx 8$, and so on. In some sense, we decouple the scaling that we need for a correct CKKS multiplications from the individual $q_i$. We call the special machine word a sprout, and we call it a universal sprout if it can have any bit size between 0 and 64. If you just came here to understand the idea behind Grafting, congratulations, you made it! That’s the idea, nothing more, nothing less.</p> <p>Of course, reality is more complex (it’s always the same, huh): How do we actually realize a universal sprout? While all the mathematical details are in <a href="https://eprint.iacr.org/2024/1014">our paper</a>, let’s try to understand it using much less math. Remember all the thousands of random numbers from 0 to $q$ I talked about? They have a specific meaning, they are coefficients of a polynomial with degree $N - 1$:</p> \[a(x) = a_0 + a_1 x + a_2 x^2 + \ldots + a_{N-1} x^{N-1} \text{;}\] <p>each coefficient $a_i$ is a number from 0 to $q$, each polynomial needs $N$ coefficients, and each ciphertext needs two of these polynomials. Sometimes, we need to multiply two polynomials and we multiply two polynomials with the so-called number theoretic transform (NTT). The <a href="https://en.wikipedia.org/wiki/Discrete_Fourier_transform_over_a_ring#Number-theoretic_transform">Wikipedia article</a> is not very helpful if you’re not a mathematician, so let’s stick to our approach: We only aim at understanding the consequences the NTT has for our $q_i$, not the math behind it. For the NTT, we need each $q_i$ to equal $1 \bmod 2 N$. If you’re not familiar with the modulo operation, don’t worry, I got you: The important thing for us is that it needs to be larger than $2 N$—and usually, $N$ is already 15–20 bits large. Hence, each $q_i$ is also at least 15–20 bits or larger. So how can we get a sprout to represent 0 to 20 bits?</p> <p>One approach is as follows: We use the powers-of-two $0, 1, 2, 4, 8, \ldots, 2^{20}$ even if we then cannot use the NTT. And we cannot, but we can employ another trick. We move the power-of-two polynomials to a polynomial with a helper prime, use the NTT for polynomial multiplication, then go back to the power-of-two. This works as long as the helper prime is larger than 60 bit which fortunately we have. That’s actually all we need, we have a universal sprout: We use powers-of-two for all bit sizes up to 20 with a helper prime, then use different primes up to 64 bit each. For $N = 2^{15}$, we reduce the number of $q_i$ from 20 to 12, so almost by 50%, and it results in up to two times better performance! But, in my personal opinion, that’s not the best part of Grafting. I’ve said it before, I’ll say it again: We decouple the scaling from the individual $q_i$ which makes CKKS much more usable. Two examples: Designing parameter sets is much easier now, and computing with arbitrary scalings is easier now. And that’s it! I hope you learned how Grafting improves the performance and usability of CKKS. 안녕히 가세요!</p> <h2 id="faq-what-is-homomorphic-encryption">FAQ: What is homomorphic encryption?</h2> <p>Homomorphic encryption is a special type of encryption which enables computations on encrypted data. You can think about it as locking bits or numbers in a secure box with buttons on the outside that launch operations such as an addition or multiplication. Homomorphic encryption enables new opportunities: You can encrypt your sensitive data, send it to a third party for expensive computations, and get back the encrypted result without doing any of these computations yourself. This is like sending the third party your secure box, telling them which buttons to press so you don’t have to do it, and afterward getting the box back with the result: Your information stays private even when being computed on.</p> <h2 id="faq-what-is-ckks">FAQ: What is CKKS?</h2> <p>CKKS is a homomorphic encryption scheme for approximate numbers. It was created by Cheon, Kim, Kim, and Song in 2016 and shines in data analysis and modelling. Real-world data is often approximate (for example measurements such as temperature) and so are the computations on the data (for example weather forecasting). CKKS trades off an exact result for better performance and is a great choice for encrypted computations on most real-world data.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[TL;DR: Grafting is a new approach for managing a CKKS ciphertext modulus. With so-called sprouts, we dedicate a few machine words to scaling and use word-sized primes for the remaining ciphertext modulus improving performance. With universal sprouts, we can represent any bit size up to the word size using powers-of-two and introduce arbitrary scaling for RNS-CKKS improving usability for parameter and circuit design.]]></summary></entry><entry><title type="html">a post with images</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/images/" rel="alternate" type="text/html" title="a post with images"/><published>2025-03-28T21:01:00+00:00</published><updated>2025-03-28T21:01:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2025/images</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/images/"><![CDATA[<p>This is an example post with image galleries.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/blog/250508_Johannes/1-480.webp 480w,/ckksorg1659181/assets/img/blog/250508_Johannes/1-800.webp 800w,/ckksorg1659181/assets/img/blog/250508_Johannes/1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/blog/250508_Johannes/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/7-480.webp 480w,/ckksorg1659181/assets/img/7-800.webp 800w,/ckksorg1659181/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <p>Images can be made zoomable. Simply add <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags that you want to make zoomable.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/8-480.webp 480w,/ckksorg1659181/assets/img/8-800.webp 800w,/ckksorg1659181/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/10-480.webp 480w,/ckksorg1659181/assets/img/10-800.webp 800w,/ckksorg1659181/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The rest of the images in this post are all zoomable, arranged into different mini-galleries.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/11-480.webp 480w,/ckksorg1659181/assets/img/11-800.webp 800w,/ckksorg1659181/assets/img/11-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/12-480.webp 480w,/ckksorg1659181/assets/img/12-800.webp 800w,/ckksorg1659181/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ckksorg1659181/assets/img/7-480.webp 480w,/ckksorg1659181/assets/img/7-800.webp 800w,/ckksorg1659181/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ckksorg1659181/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included images could look like]]></summary></entry><entry><title type="html">a post with math</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/math/" rel="alternate" type="text/html" title="a post with math"/><published>2025-03-27T15:12:00+00:00</published><updated>2025-03-27T15:12:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2025/math</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2025/plotly</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2024/photo-gallery</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2024/tabs</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="7c745ca0-c289-4733-b363-4830def82d50" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="7c745ca0-c289-4733-b363-4830def82d50" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="62b7b017-6206-456a-a482-0cb1f1e72ebe" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="62b7b017-6206-456a-a482-0cb1f1e72ebe" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="c176a078-65d2-41e9-a7df-3a61204c0044" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="c176a078-65d2-41e9-a7df-3a61204c0044" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2024/typograms</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2024/post-citation</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://cryptolabinc.github.io/ckksorg1659181/blog/2024/pseudocode</id><content type="html" xml:base="https://cryptolabinc.github.io/ckksorg1659181/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry></feed>